[Попробовать уложиться в 15 минут или даже 11(минимум 10, нужно для монетизации)]
[Когда рассказываю про какой-либо метод, отображать его сигнатуру в углу]
[Так же отображать имя рассматриваемого класса]
[Во время демонстрации кода нужно скрывать код, который в данный момент не рассматривается]
[Перед тем, как начать демонстрацию кода, нужно отключить подсвечивание кода]
[Заставка должна содержать JavaIncretio Java SE 11. Boolean и список основных методов или их примеров, чтобы заинтересовать смотрящего]

[показать на весь экран первый кадр презентации]
Привет, Джавист!
Это рубрика - обзор классов Java SE версии 11.
В данном ролике:
[Вступительное слово:]
    Что представляет из себя класс Boolean?
    Какие поля и методы он имеет?
    И почему его конструкторы помечены как deprecated?

[показать на весь экран второй кадр презентации]
Класс Boolean расположен в пакете java.lang. Следовательно, его не нужно явно импортировать, так как классы данного пакета автоматически импортируются в любой ваш код.

[показать на весь экран третий кадр презентации]
Класс Boolean появился в Java SE версии один точка ноль.
Наследуется он от класса Object и реализует интерфейсы Serializable и Comparable

[показать на весь экран четвёртый кадр презентации]
Класс Boolean является обёрткой над примитивным типом boolean и содержит внутри себя одно нестатическое поле примитивного типа boolean.
Так же класс содержит методы для преобразования примитивного типа boolean в строку и обратно.

[показать на весь экран пятый кадр презентации]
У класса есть два конструктора, которые начиная с Java SE 9 поменены как deprecated.
Создание объекта Boolean теперь предполагается через статические фабричные методы, о которых я расскажу немного ниже.
[открываю в IDEA проект JavaIncretioSE11 в пакете com.incretio.java.se11.class_boolean. Уже имеется пакет и метод main]
Не смотря на то, что конструкторы считаются уже устаревшими и в последующих версиях Java SE они могут быть удалены, быстро рассмотрим их.

Первый конструктор принимает параметр примитивного типа boolean. И по сути он просто устанавливает значение для поле value внутри класса Boolean.[показать поле в классе]
Тут же можем заметить что класс Boolean - immutable, так как поле value, которое хранит состояние объекта - финальное.
[private final boolean value]

[демонстрация примера example 1,2. Конструктор принимает boolean]
Создадим переменную примитивного типа boolean и передадим её в конструктор.
Выведем объект Boolean в консоль, видим в консоли true.
Если передаём в конструктор false, то в консоли увидим строку false.

[деминстрация примера example 3,4. Конструктор принимает String]
Второй конструктор принимает параметр строкового типа String.
Если передаём в него строку "true", то получаем Boolean объект со значением true. При этом регистр не учитывается.
Если передать любую другую строку, то получим объект со значением false.

[демонстрация примера example 5,6,7,8. Приведение примитива к Boolean]
Ещё один способ создать объект типа Boolean - это использовать приведение (можно даже не явное) примитивного типа boolean к объекту Boolean.
Для этого нужно присвоить переменной типа Boolean литерал true или false, либо переменную примитивного типа boolean.

[демонстрация примера example 9,10. Статические фабрики по boolean и по String]
Как упоминалось выше, инстанцировать объект типа Boolean можно через статические фабричные методы, такие как valueOf.
Всего их два, первый строит объект на основе примитивного типа boolean, а второй - на основе строки.
С первым всё понятно, какое передаём значение в конструктор, объект с таким значением и получим.
[демонстрация примера example 11,12]
Второй метод вернёт объект со значением true только в том случае, если в него передать в любом регистре строку "true".
Во всех остальных случаях получим объект со значением false.

[демонстрация example 13, 14. Статический метод parseBoolean]
Статический метод parseBoolean принимает один параметр типа String и возвращает true,
если переданная в качестве параметра строка равна "true" без учёта регистра, иначе возвращает false.
Отличает его от метода valueOf только то, что данный метод возвращает примитивный тип, а valueOf класс Boolean.

[example 15. Логические операции. Конъюнкция]
Класс Boolean имеет три статических метода для выполнения логических операций.
Первая из них - логическое И или конъюнкция [logicalAnd(boolean, boolean)]
Метод имеет два аргумента типа boolean и возвращает результат выполнения над ними логической операции И.
Т.е. true вернётся только в том случае, если оба аргумента были true.

[example 16. Логические операции. Дизъюнкция]
Вторая - логическое ИЛИ или дизъюнкция [logicalOr(boolean, boolean)]
Метод имеет два аргумента типа boolean и возвращает результат выполнения над ними логической операции ИЛИ.
Т.е. true вернётся когда хотя бы один из аргументов равен true.

[example 17. Логические операции. Исключающая конъюнкция]
Третья логическая операции - исключающее ИЛИ или исключающая дизъюнкция [logicalXor(boolean, boolean)]
Метод так же имеет два аргумента типа boolean и возвращает результат выполнения над ними логической исключающее ИЛИ.
Т.е. true вернётся когда аргументы отличны друг от друга.



